#ifndef _TOKENIZER_
#define _TOKENIZER_


/* Return true (non-zero) if c is a whitespace characer
   ('\t' or ' ').  
   Zero terminators are not printable (therefore false) */
int space_char(char c){
  if(c ==' ' || c == '\t'){
    return 1;
  }
  else
    return 0;
}

/* Return true (non-zero) if c is a non-whitespace 
   character (not tab or space).  
   Zero terminators are not printable (therefore false) */ 
int non_space_char(char c){
  if(space_char(c) || c== '\0'){
    return 0;
  }
  return 1;
  
}

/* Returns a pointer to the first character of the next 
   space-separated token in zero-terminated str.  Return a zero pointer if 
   str does not contain any tokens. */
char *token_start(char *str)
{
  while(space_char(*str)){
	str++;
  }
  /*in the case that you reach an end terminator, you return 0 so you have something
  but not a token */
  if(*str == '\0')
    return 0;  
  else
    return str;
} 

/* Returns a pointer terminator char following *token */
char *token_terminator(char *token)
{
  while(*token != '\0' && non_space_char(*token))
    { 
      token++;
    }
  return token;
}

/* Counts the number of tokens in the string argument. */
int count_tokens(char *str)
{
  int count = 0;
  str = token_start(str);
  count++;
  
  //the while loop condition establishes that a token exists
  //then the code inside the loop prepares the next token and counts
  //for as long as theres not a null spot
  
  while(*str != '\0')
    {
      if(non_space_char(*str)){
	str++;
      }
      else{
	str = token_start(str);
	count++;
      }
    }
  return count;
}

/* Returns a fresly allocated new zero-terminated string 
   containing <len> chars from <inStr> */
char *copy_str(char *inStr, short len){
  char* cStr = (*char)malloc(len * sizeof(char));

}

/* Returns a freshly allocated zero-terminated vector of freshly allocated 
   space-separated tokens from zero-terminated str.

   For example, tokenize("hello world string") would result in:
     tokens[0] = "hello"
     tokens[1] = "world"
     tokens[2] = "string" 
     tokens[3] = 0

*/
char **tokenize(char* str);

/* Prints all tokens. */
void print_tokens(char **tokens);

/* Frees all tokens and the vector containing themx. */
void free_tokens(char **tokens);

#endif
